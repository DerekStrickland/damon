// Code generated by counterfeiter. DO NOT EDIT.
package nomadfakes

import (
	"sync"

	"github.com/hashicorp/damon/nomad"
	"github.com/hashicorp/nomad/api"
)

type FakeMetricsClient struct {
	MetricsStub        func(*api.QueryOptions) ([]byte, error)
	metricsMutex       sync.RWMutex
	metricsArgsForCall []struct {
		arg1 *api.QueryOptions
	}
	metricsReturns struct {
		result1 []byte
		result2 error
	}
	metricsReturnsOnCall map[int]struct {
		result1 []byte
		result2 error
	}
	MetricsSummaryStub        func(*api.QueryOptions) (*api.MetricsSummary, *api.QueryMeta, error)
	metricsSummaryMutex       sync.RWMutex
	metricsSummaryArgsForCall []struct {
		arg1 *api.QueryOptions
	}
	metricsSummaryReturns struct {
		result1 *api.MetricsSummary
		result2 *api.QueryMeta
		result3 error
	}
	metricsSummaryReturnsOnCall map[int]struct {
		result1 *api.MetricsSummary
		result2 *api.QueryMeta
		result3 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeMetricsClient) Metrics(arg1 *api.QueryOptions) ([]byte, error) {
	fake.metricsMutex.Lock()
	ret, specificReturn := fake.metricsReturnsOnCall[len(fake.metricsArgsForCall)]
	fake.metricsArgsForCall = append(fake.metricsArgsForCall, struct {
		arg1 *api.QueryOptions
	}{arg1})
	stub := fake.MetricsStub
	fakeReturns := fake.metricsReturns
	fake.recordInvocation("Metrics", []interface{}{arg1})
	fake.metricsMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeMetricsClient) MetricsCallCount() int {
	fake.metricsMutex.RLock()
	defer fake.metricsMutex.RUnlock()
	return len(fake.metricsArgsForCall)
}

func (fake *FakeMetricsClient) MetricsCalls(stub func(*api.QueryOptions) ([]byte, error)) {
	fake.metricsMutex.Lock()
	defer fake.metricsMutex.Unlock()
	fake.MetricsStub = stub
}

func (fake *FakeMetricsClient) MetricsArgsForCall(i int) *api.QueryOptions {
	fake.metricsMutex.RLock()
	defer fake.metricsMutex.RUnlock()
	argsForCall := fake.metricsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeMetricsClient) MetricsReturns(result1 []byte, result2 error) {
	fake.metricsMutex.Lock()
	defer fake.metricsMutex.Unlock()
	fake.MetricsStub = nil
	fake.metricsReturns = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *FakeMetricsClient) MetricsReturnsOnCall(i int, result1 []byte, result2 error) {
	fake.metricsMutex.Lock()
	defer fake.metricsMutex.Unlock()
	fake.MetricsStub = nil
	if fake.metricsReturnsOnCall == nil {
		fake.metricsReturnsOnCall = make(map[int]struct {
			result1 []byte
			result2 error
		})
	}
	fake.metricsReturnsOnCall[i] = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *FakeMetricsClient) MetricsSummary(arg1 *api.QueryOptions) (*api.MetricsSummary, *api.QueryMeta, error) {
	fake.metricsSummaryMutex.Lock()
	ret, specificReturn := fake.metricsSummaryReturnsOnCall[len(fake.metricsSummaryArgsForCall)]
	fake.metricsSummaryArgsForCall = append(fake.metricsSummaryArgsForCall, struct {
		arg1 *api.QueryOptions
	}{arg1})
	stub := fake.MetricsSummaryStub
	fakeReturns := fake.metricsSummaryReturns
	fake.recordInvocation("MetricsSummary", []interface{}{arg1})
	fake.metricsSummaryMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakeMetricsClient) MetricsSummaryCallCount() int {
	fake.metricsSummaryMutex.RLock()
	defer fake.metricsSummaryMutex.RUnlock()
	return len(fake.metricsSummaryArgsForCall)
}

func (fake *FakeMetricsClient) MetricsSummaryCalls(stub func(*api.QueryOptions) (*api.MetricsSummary, *api.QueryMeta, error)) {
	fake.metricsSummaryMutex.Lock()
	defer fake.metricsSummaryMutex.Unlock()
	fake.MetricsSummaryStub = stub
}

func (fake *FakeMetricsClient) MetricsSummaryArgsForCall(i int) *api.QueryOptions {
	fake.metricsSummaryMutex.RLock()
	defer fake.metricsSummaryMutex.RUnlock()
	argsForCall := fake.metricsSummaryArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeMetricsClient) MetricsSummaryReturns(result1 *api.MetricsSummary, result2 *api.QueryMeta, result3 error) {
	fake.metricsSummaryMutex.Lock()
	defer fake.metricsSummaryMutex.Unlock()
	fake.MetricsSummaryStub = nil
	fake.metricsSummaryReturns = struct {
		result1 *api.MetricsSummary
		result2 *api.QueryMeta
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeMetricsClient) MetricsSummaryReturnsOnCall(i int, result1 *api.MetricsSummary, result2 *api.QueryMeta, result3 error) {
	fake.metricsSummaryMutex.Lock()
	defer fake.metricsSummaryMutex.Unlock()
	fake.MetricsSummaryStub = nil
	if fake.metricsSummaryReturnsOnCall == nil {
		fake.metricsSummaryReturnsOnCall = make(map[int]struct {
			result1 *api.MetricsSummary
			result2 *api.QueryMeta
			result3 error
		})
	}
	fake.metricsSummaryReturnsOnCall[i] = struct {
		result1 *api.MetricsSummary
		result2 *api.QueryMeta
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeMetricsClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.metricsMutex.RLock()
	defer fake.metricsMutex.RUnlock()
	fake.metricsSummaryMutex.RLock()
	defer fake.metricsSummaryMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeMetricsClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ nomad.MetricsClient = new(FakeMetricsClient)
