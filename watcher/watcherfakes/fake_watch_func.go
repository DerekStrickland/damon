// Code generated by counterfeiter. DO NOT EDIT.
package watcherfakes

import (
	"sync"

	"github.com/hcjulz/damon/watcher"
)

type FakeWatchFunc struct {
	Stub        func()
	mutex       sync.RWMutex
	argsForCall []struct {
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeWatchFunc) Spy() {
	fake.mutex.Lock()
	fake.argsForCall = append(fake.argsForCall, struct {
	}{})
	stub := fake.Stub
	fake.recordInvocation("WatchFunc", []interface{}{})
	fake.mutex.Unlock()
	if stub != nil {
		fake.Stub()
	}
}

func (fake *FakeWatchFunc) CallCount() int {
	fake.mutex.RLock()
	defer fake.mutex.RUnlock()
	return len(fake.argsForCall)
}

func (fake *FakeWatchFunc) Calls(stub func()) {
	fake.mutex.Lock()
	defer fake.mutex.Unlock()
	fake.Stub = stub
}

func (fake *FakeWatchFunc) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.mutex.RLock()
	defer fake.mutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeWatchFunc) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ watcher.WatchFunc = new(FakeWatchFunc).Spy
